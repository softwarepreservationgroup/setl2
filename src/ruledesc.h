/*
 *   rule descriptions
 *
 *   generated by LALR
 */

static char *rule_desc[] = {
   "%accept ::= <compilation_unit_list>",
   "<compilation_unit_list> ::= <compilation_unit_list> <compilation_unit>",
   "<compilation_unit_list> ::= <compilation_unit>",
   "<compilation_unit> ::= <native_package_spec_unit>",
   "<compilation_unit> ::= <package_spec_unit>",
   "<compilation_unit> ::= <package_body_unit>",
   "<compilation_unit> ::= <class_spec_unit>",
   "<compilation_unit> ::= <class_body_unit>",
   "<compilation_unit> ::= <process_spec_unit>",
   "<compilation_unit> ::= <process_body_unit>",
   "<compilation_unit> ::= <program_unit>",
   "<compilation_unit> ::= %error",
   "<native_package_spec_unit> ::= <native_package_spec_header> <no_body> <proc_declaration_part> <unit_tail>",
   "<native_package_spec_header> ::= NATIVE PACKAGE identifier ;",
   "<native_package_spec_header> ::= NATIVE PACKAGE %error ;",
   "<package_spec_unit> ::= <package_spec_header> <data_declaration_part> <no_body> <proc_declaration_part> <unit_tail>",
   "<package_spec_header> ::= PACKAGE identifier ;",
   "<package_spec_header> ::= PACKAGE %error ;",
   "<package_body_unit> ::= <package_body_header> <use_part> <data_declaration_part> <no_body> <proc_definition_part> <unit_tail>",
   "<package_body_header> ::= PACKAGE BODY identifier ;",
   "<package_body_header> ::= PACKAGE BODY %error ;",
   "<class_spec_unit> ::= <class_spec_header> <inherit_part> <data_declaration_part> <no_body> <proc_declaration_part> <unit_tail>",
   "<class_spec_header> ::= CLASS identifier ;",
   "<class_spec_header> ::= CLASS %error ;",
   "<class_body_unit> ::= <class_body_header> <use_part> <data_declaration_part> <no_body> <proc_definition_part> <unit_tail>",
   "<class_body_header> ::= CLASS BODY identifier ;",
   "<class_body_header> ::= CLASS BODY %error ;",
   "<process_spec_unit> ::= <process_spec_header> <data_declaration_part> <no_body> <proc_declaration_part> <unit_tail>",
   "<process_spec_header> ::= PROCESS CLASS identifier ;",
   "<process_spec_header> ::= PROCESS CLASS %error ;",
   "<process_body_unit> ::= <process_body_header> <use_part> <data_declaration_part> <no_body> <proc_definition_part> <unit_tail>",
   "<process_body_header> ::= PROCESS CLASS BODY identifier ;",
   "<process_body_header> ::= PROCESS CLASS BODY %error ;",
   "<program_unit> ::= <program_header> <use_part> <data_declaration_part> <body> <proc_definition_part> <unit_tail>",
   "<program_header> ::= PROGRAM identifier ;",
   "<program_header> ::= PROGRAM %error ;",
   "<use_part> ::= <use_clause> <use_part>",
   "<use_part> ::= %empty",
   "<use_clause> ::= USE <use_list> ;",
   "<use_list> ::= <use_list> , <use_item>",
   "<use_list> ::= <use_item>",
   "<use_item> ::= identifier",
   "<use_item> ::= %error",
   "<inherit_part> ::= <inherit_clause> <inherit_part>",
   "<inherit_part> ::= %empty",
   "<inherit_clause> ::= INHERIT <inherit_list> ;",
   "<inherit_list> ::= <inherit_list> , <inherit_item>",
   "<inherit_list> ::= <inherit_item>",
   "<inherit_item> ::= identifier",
   "<inherit_item> ::= %error",
   "<proc_declaration_part> ::= <proc_declaration_list>",
   "<proc_declaration_part> ::= %empty",
   "<proc_declaration_list> ::= <proc_declaration_list> <procedure_header> ;",
   "<proc_declaration_list> ::= <procedure_header> ;",
   "<proc_definition_part> ::= <proc_definition_list>",
   "<proc_definition_part> ::= %empty",
   "<proc_definition_list> ::= <proc_definition_list> <procedure_unit>",
   "<proc_definition_list> ::= <procedure_unit>",
   "<procedure_unit> ::= <procedure_header> ; <data_declaration_part> <body> <proc_definition_part> <unit_tail>",
   "<procedure_header> ::= <procedure_name> <parameter_part>",
   "<procedure_name> ::= PROCEDURE identifier",
   "<procedure_name> ::= PROCEDURE %error",
   "<parameter_part> ::= ( <parameter_list> )",
   "<parameter_part> ::= ( )",
   "<parameter_part> ::= %empty",
   "<parameter_part> ::= %error",
   "<parameter_list> ::= <parameter_list> , <parameter_spec>",
   "<parameter_list> ::= <parameter_spec>",
   "<parameter_spec> ::= identifier",
   "<parameter_spec> ::= RD identifier",
   "<parameter_spec> ::= WR identifier",
   "<parameter_spec> ::= RW identifier",
   "<parameter_spec> ::= %error",
   "<procedure_header> ::= <method_header>",
   "<method_header> ::= PROCEDURE SELF addop identifier",
   "<method_header> ::= PROCEDURE identifier addop SELF",
   "<method_header> ::= PROCEDURE SELF - identifier",
   "<method_header> ::= PROCEDURE identifier - SELF",
   "<method_header> ::= PROCEDURE SELF mulop identifier",
   "<method_header> ::= PROCEDURE identifier mulop SELF",
   "<method_header> ::= PROCEDURE SELF ** identifier",
   "<method_header> ::= PROCEDURE identifier ** SELF",
   "<method_header> ::= PROCEDURE SELF relop identifier",
   "<method_header> ::= PROCEDURE identifier relop SELF",
   "<method_header> ::= PROCEDURE fromop SELF",
   "<method_header> ::= PROCEDURE unop SELF",
   "<method_header> ::= PROCEDURE - SELF",
   "<method_header> ::= PROCEDURE SELF ( identifier )",
   "<method_header> ::= PROCEDURE SELF { identifier }",
   "<method_header> ::= PROCEDURE SELF ( identifier .. identifier )",
   "<method_header> ::= PROCEDURE SELF ( identifier .. )",
   "<method_header> ::= PROCEDURE SELF ( identifier ) := identifier",
   "<method_header> ::= PROCEDURE SELF { identifier } := identifier",
   "<method_header> ::= PROCEDURE SELF ( identifier .. identifier ) := identifier",
   "<method_header> ::= PROCEDURE SELF ( identifier .. ) := identifier",
   "<unit_tail> ::= END <optional_unit_name> ;",
   "<optional_unit_name> ::= identifier",
   "<optional_unit_name> ::= %error",
   "<optional_unit_name> ::= %empty",
   "<data_declaration_part> ::= <data_declaration_list>",
   "<data_declaration_part> ::= %empty",
   "<data_declaration_list> ::= <data_declaration_list> <data_declaration> ;",
   "<data_declaration_list> ::= <data_declaration> ;",
   "<data_declaration> ::= <const_clause>",
   "<data_declaration> ::= <sel_clause>",
   "<data_declaration> ::= <var_clause>",
   "<data_declaration> ::= <class_var_clause>",
   "<const_clause> ::= CONST <const_declaration_list>",
   "<const_declaration_list> ::= <const_declaration_list> , <const_declaration>",
   "<const_declaration_list> ::= <const_declaration>",
   "<const_declaration> ::= identifier := <expression>",
   "<const_declaration> ::= %error",
   "<sel_clause> ::= SEL <sel_declaration_list>",
   "<sel_declaration_list> ::= <sel_declaration_list> , <sel_declaration>",
   "<sel_declaration_list> ::= <sel_declaration>",
   "<sel_declaration> ::= identifier ( literal )",
   "<sel_declaration> ::= identifier ( %error )",
   "<sel_declaration> ::= %error",
   "<var_clause> ::= VAR <var_declaration_list>",
   "<var_declaration_list> ::= <var_declaration_list> , <var_declaration>",
   "<var_declaration_list> ::= <var_declaration>",
   "<var_declaration> ::= identifier",
   "<var_declaration> ::= identifier := <expression>",
   "<var_declaration> ::= %error",
   "<class_var_clause> ::= CLASS VAR <class_var_decl_list>",
   "<class_var_decl_list> ::= <class_var_decl_list> , <class_var_decl>",
   "<class_var_decl_list> ::= <class_var_decl>",
   "<class_var_decl> ::= identifier",
   "<class_var_decl> ::= identifier := <expression>",
   "<class_var_decl> ::= %error",
   "<no_body> ::= %empty",
   "<body> ::= %empty",
   "<body> ::= <statement_list>",
   "<statement_list> ::= <statement_list> <stmt_or_expression> ;",
   "<statement_list> ::= <stmt_or_expression> ;",
   "<stmt_or_expression> ::= <statement>",
   "<stmt_or_expression> ::= <expression>",
   "<expression_list> ::= <expression_list> , <expression>",
   "<expression_list> ::= <expression>",
   "<expression> ::= <left_term> := <expression>",
   "<expression> ::= <left_term> assignop <expression>",
   "<primary> ::= FOR <for_iterator> LOOP <statement_list> END LOOP",
   "<for_iterator> ::= <expression_list>",
   "<for_iterator> ::= <expression_list> suchthat <expression>",
   "<primary> ::= WHILE <expression> LOOP <statement_list> END LOOP",
   "<primary> ::= UNTIL <expression> LOOP <statement_list> END LOOP",
   "<primary> ::= LOOP <statement_list> END LOOP",
   "<primary> ::= IF <expression> THEN <statement_list> <opt_else_stmt_clause> END IF",
   "<opt_else_stmt_clause> ::= ELSEIF <expression> THEN <statement_list> <opt_else_stmt_clause>",
   "<opt_else_stmt_clause> ::= ELSE <statement_list>",
   "<opt_else_stmt_clause> ::= %empty",
   "<primary> ::= IF <expression> THEN <expression> <opt_else_expr_clause> END IF",
   "<opt_else_expr_clause> ::= ELSEIF <expression> THEN <expression> <opt_else_expr_clause>",
   "<opt_else_expr_clause> ::= ELSE <expression>",
   "<opt_else_expr_clause> ::= %empty",
   "<primary> ::= CASE <expression> <case_when_stmt_list> <guard_case_stmt_default> END CASE",
   "<case_when_stmt_list> ::= <case_when_stmt_list> <case_when_stmt_item>",
   "<case_when_stmt_list> ::= <case_when_stmt_item>",
   "<case_when_stmt_item> ::= WHEN <expression_list> => <statement_list>",
   "<primary> ::= CASE <guard_when_stmt_list> <guard_case_stmt_default> END CASE",
   "<guard_when_stmt_list> ::= <guard_when_stmt_list> <guard_when_stmt_item>",
   "<guard_when_stmt_list> ::= <guard_when_stmt_item>",
   "<guard_when_stmt_item> ::= WHEN <expression> => <statement_list>",
   "<guard_case_stmt_default> ::= OTHERWISE => <statement_list>",
   "<guard_case_stmt_default> ::= %empty",
   "<primary> ::= CASE <expression> <case_when_expr_list> <guard_case_expr_default> END CASE",
   "<case_when_expr_list> ::= <case_when_expr_list> <case_when_expr_item>",
   "<case_when_expr_list> ::= <case_when_expr_item>",
   "<case_when_expr_item> ::= WHEN <expression_list> => <expression>",
   "<primary> ::= CASE <guard_when_expr_list> <guard_case_expr_default> END CASE",
   "<guard_when_expr_list> ::= <guard_when_expr_list> <guard_when_expr_item>",
   "<guard_when_expr_list> ::= <guard_when_expr_item>",
   "<guard_when_expr_item> ::= WHEN <expression> => <expression>",
   "<guard_case_expr_default> ::= OTHERWISE => <expression>",
   "<guard_case_expr_default> ::= %empty",
   "<statement> ::= STOP",
   "<statement> ::= RETURN",
   "<statement> ::= RETURN <expression>",
   "<statement> ::= EXIT",
   "<statement> ::= EXIT <expression>",
   "<statement> ::= EXIT WHEN <expression>",
   "<statement> ::= EXIT <expression> WHEN <expression>",
   "<statement> ::= CONTINUE",
   "<statement> ::= CONTINUE WHEN <expression>",
   "<statement> ::= ASSERT <expression>",
   "<statement> ::= NULL",
   "<primary> ::= <lambda_header> ; <data_declaration_part> <body> <proc_definition_part> END LAMBDA",
   "<lambda_header> ::= <lambda_key> <lambda_parameters>",
   "<lambda_key> ::= LAMBDA",
   "<lambda_parameters> ::= ( <lambda_param_list> )",
   "<lambda_parameters> ::= ( )",
   "<lambda_parameters> ::= %empty",
   "<lambda_parameters> ::= %error",
   "<lambda_param_list> ::= <lambda_param_list> , <lambda_param_spec>",
   "<lambda_param_list> ::= <lambda_param_spec>",
   "<lambda_param_spec> ::= identifier",
   "<lambda_param_spec> ::= %error",
   "<expression> ::= quantifier <expression_list> suchthat <expression>",
   "<expression> ::= <left_term> fromop <left_term>",
   "<expression> ::= <and_expression>",
   "<expression> ::= <or_expression>",
   "<expression> ::= <not_term>",
   "<and_expression> ::= <and_term> AND <not_term>",
   "<and_term> ::= <and_term> AND <not_term>",
   "<and_term> ::= <not_term>",
   "<or_expression> ::= <or_term> OR <not_term>",
   "<or_term> ::= <or_term> OR <not_term>",
   "<or_term> ::= <not_term>",
   "<not_term> ::= NOT <relop_term>",
   "<not_term> ::= <relop_term>",
   "<relop_term> ::= <relop_term> relop <addop_term>",
   "<relop_term> ::= <addop_term>",
   "<addop_term> ::= <addop_term> addop <mulop_term>",
   "<addop_term> ::= <addop_term> - <mulop_term>",
   "<addop_term> ::= <mulop_term>",
   "<mulop_term> ::= <mulop_term> mulop <expon_term>",
   "<mulop_term> ::= <mulop_term> applyop <expon_term>",
   "<mulop_term> ::= <expon_term>",
   "<expon_term> ::= <left_term> ** <expon_term>",
   "<expon_term> ::= <left_term>",
   "<left_term> ::= unop <left_term>",
   "<left_term> ::= - <left_term>",
   "<left_term> ::= fromop <left_term>",
   "<left_term> ::= ^ <left_term>",
   "<left_term> ::= applyop <left_term>",
   "<left_term> ::= <primary>",
   "<primary> ::= literal",
   "<primary> ::= { <expression_list> }",
   "<primary> ::= { <expression_list> .. <expression> }",
   "<primary> ::= { <iterator_expression> suchthat <expression> }",
   "<primary> ::= { <expression> : <expression_list> suchthat <expression> }",
   "<primary> ::= { <expression> : <expression_list> }",
   "<primary> ::= { }",
   "<primary> ::= [ <tuple_list> .. <expression> ]",
   "<primary> ::= [ <iterator_expression> suchthat <expression> ]",
   "<primary> ::= [ <expression> : <expression_list> suchthat <expression> ]",
   "<primary> ::= [ <expression> : <expression_list> ]",
   "<primary> ::= [ ]",
   "<iterator_expression> ::= <expression>",
   "<primary> ::= ( <expression> )",
   "<primary> ::= identifier",
   "<primary> ::= SELF",
   "<primary> ::= <primary> ( <expression_list> )",
   "<primary> ::= <primary> ( <expression> .. <expression> )",
   "<primary> ::= <primary> ( <expression> .. )",
   "<primary> ::= <primary> ( )",
   "<primary> ::= <primary> { <expression_list> }",
   "<primary> ::= <primary> . identifier",
   "<primary> ::= [ <tuple_list> ]",
   "<primary> ::= %error",
   "<tuple_list> ::= <tuple_list> , <tuple_element>",
   "<tuple_list> ::= <tuple_element>",
   "<tuple_element> ::= <expression>",
   "<tuple_element> ::= -",
   NULL};
