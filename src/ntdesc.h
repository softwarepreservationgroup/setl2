/*
 *   nonterminal descriptions
 *
 *   generated by LALR
 */

static char *nonterm_desc[] = {
   "%accept",
   "<compilation_unit_list>",
   "<compilation_unit>",
   "<native_package_spec_unit>",
   "<package_spec_unit>",
   "<package_body_unit>",
   "<class_spec_unit>",
   "<class_body_unit>",
   "<process_spec_unit>",
   "<process_body_unit>",
   "<program_unit>",
   "<native_package_spec_header>",
   "<no_body>",
   "<proc_declaration_part>",
   "<unit_tail>",
   "<package_spec_header>",
   "<data_declaration_part>",
   "<package_body_header>",
   "<use_part>",
   "<proc_definition_part>",
   "<class_spec_header>",
   "<inherit_part>",
   "<class_body_header>",
   "<process_spec_header>",
   "<process_body_header>",
   "<program_header>",
   "<body>",
   "<use_clause>",
   "<use_list>",
   "<use_item>",
   "<inherit_clause>",
   "<inherit_list>",
   "<inherit_item>",
   "<proc_declaration_list>",
   "<procedure_header>",
   "<proc_definition_list>",
   "<procedure_unit>",
   "<procedure_name>",
   "<parameter_part>",
   "<parameter_list>",
   "<parameter_spec>",
   "<method_header>",
   "<optional_unit_name>",
   "<data_declaration_list>",
   "<data_declaration>",
   "<const_clause>",
   "<sel_clause>",
   "<var_clause>",
   "<class_var_clause>",
   "<const_declaration_list>",
   "<const_declaration>",
   "<expression>",
   "<sel_declaration_list>",
   "<sel_declaration>",
   "<var_declaration_list>",
   "<var_declaration>",
   "<class_var_decl_list>",
   "<class_var_decl>",
   "<statement_list>",
   "<stmt_or_expression>",
   "<statement>",
   "<expression_list>",
   "<left_term>",
   "<primary>",
   "<for_iterator>",
   "<opt_else_stmt_clause>",
   "<opt_else_expr_clause>",
   "<case_when_stmt_list>",
   "<guard_case_stmt_default>",
   "<case_when_stmt_item>",
   "<guard_when_stmt_list>",
   "<guard_when_stmt_item>",
   "<case_when_expr_list>",
   "<guard_case_expr_default>",
   "<case_when_expr_item>",
   "<guard_when_expr_list>",
   "<guard_when_expr_item>",
   "<lambda_header>",
   "<lambda_key>",
   "<lambda_parameters>",
   "<lambda_param_list>",
   "<lambda_param_spec>",
   "<and_expression>",
   "<or_expression>",
   "<not_term>",
   "<and_term>",
   "<or_term>",
   "<relop_term>",
   "<addop_term>",
   "<mulop_term>",
   "<expon_term>",
   "<iterator_expression>",
   "<tuple_list>",
   "<tuple_element>",
   NULL};
