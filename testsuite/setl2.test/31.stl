-- ============================================================
--
--  Control Structures Test
--  =======================
--
--  This program tests various control structures.  It is not as robust a
--  test as the other programs.  Control structures are used so
--  frequently in all programs that It is unlikely a bug in this area
--  will go undiscovered.
--

program test_program;

   use Test_Common;

   Begin_Test("Control structure test");

   --
   --  Test if .. elseif.
   --

   for i in [1 .. 3] loop

      if i = 1 then
         null;
      elseif i = 2 then
         null;
      elseif i = 3 then
         null;
      else 

         Log_Error("If .. elseif failed!");

      end if;

   end loop;

   if (if true then 1 else 0 end if) /= 1 then

      Log_Error("If .. elseif failed!");

   end if;

   if (if false then 1 else 0 end if) /= 0 then

      Log_Error("If .. elseif failed!");

   end if;

   --
   --  Test case.
   --

   for i in [1 .. 20] loop

      case i
         when 1,5,9,13,17 =>
            Result := 1;
         when 2,6,10,14,18 =>
            Result := 2;
         when 3,7,11,15,19 =>
            Result := 3;
         otherwise =>
            Result := 0;
      end case;

      if Result /= i mod 4 then

         Log_Error("Case failed!");

      end if;

      Result := case i
         when 1,5,9,13,17 => 1
         when 2,6,10,14,18 => 2
         when 3,7,11,15,19 => 3
         otherwise => 0
      end case;

      if Result /= i mod 4 then

         Log_Error("Case failed!");

      end if;

      case
         when i in {1,5,9,13,17} =>
            Result := 1;
         when i in {2,6,10,14,18} =>
            Result := 2;
         when i in {3,7,11,15,19} =>
            Result := 3;
         otherwise =>
            Result := 0;
      end case;

      if Result /= i mod 4 then

         Log_Error("Case failed!");

      end if;

      Result := case
         when i in {1,5,9,13,17} => 1
         when i in {2,6,10,14,18} => 2
         when i in {3,7,11,15,19} => 3
         otherwise => 0
      end case;

      if Result /= i mod 4 then

         Log_Error("Case failed!");

      end if;

   end loop;
   
   --
   --  Test for.
   --

   Tuple := [1 .. 1000];

   for i in Tuple | i mod 8 = 0 loop

      if i mod 64 = 0 then

         Result := i;

      end if;

   end loop;
   
   if Result /= 960 then

      Log_Error(["For failed!",
                 "Result = "+str(Result)]);

   end if;

   for i in Tuple | i mod 8 = 0 loop

      if i mod 64 = 0 then

         Result := i;
         exit;

      end if;

   end loop;
   
   if Result /= 64 then

      Log_Error(["For failed!",
                 "Result = "+str(Result)]);

   end if;

   for i in Tuple | i mod 8 = 0 loop

      if i < 640 then

         continue;

      end if;

      if i mod 64 = 0 then

         Result := i;
         exit;

      end if;

   end loop;
   
   if Result /= 640 then

      Log_Error(["For failed!",
                 "Result = "+str(Result)]);

   end if;

   Result := for i in Tuple | i mod 8 = 0 loop

      if i mod 64 = 0 then

         exit i;

      end if;

   end loop;
   
   if Result /= 64 then

      Log_Error(["For failed!",
                 "Result = "+str(Result)]);

   end if;

   Result := for i in Tuple | i mod 8 = 0 loop

      if i < 640 then

         continue;

      end if;

      if i mod 64 = 0 then

         exit i;

      end if;

   end loop;
   
   if Result /= 640 then

      Log_Error(["For failed!",
                 "Result = "+str(Result)]);

   end if;

   --
   --  Test while.
   --

   i := 1;

   while i <= 1000 loop

      if i mod 8 /= 0 then

         i +:= 1;
         continue;

      end if;

      if i mod 64 = 0 then

         Result := i;

      end if;

      i +:= 1;

   end loop;
   
   if Result /= 960 then

      Log_Error(["While failed!",
                 "Result = "+str(Result)]);

   end if;

   i := 1;

   while i <= 1000 loop

      if i mod 8 /= 0 then

         i +:= 1;
         continue;

      end if;

      if i mod 64 = 0 then

         Result := i;
         exit;

      end if;

      i +:= 1;

   end loop;
   
   if Result /= 64 then

      Log_Error(["While failed!",
                 "Result = "+str(Result)]);

   end if;

   while i <= 1000 loop

      if i mod 8 /= 0 then

         i +:= 1;
         continue;

      end if;

      if i < 640 then

         i +:= 1;
         continue;

      end if;

      if i mod 64 = 0 then

         Result := i;
         exit;

      end if;

      i +:= 1;

   end loop;
   
   if Result /= 640 then

      Log_Error(["While failed!",
                 "Result = "+str(Result)]);

   end if;

   i := 1;

   Result := while i <= 1000 loop

      if i mod 8 /= 0 then

         i +:= 1;
         continue;

      end if;

      if i mod 64 = 0 then

         exit i;

      end if;

      i +:= 1;

   end loop;
   
   if Result /= 64 then

      Log_Error(["While failed!",
                 "Result = "+str(Result)]);

   end if;

   i := 1;

   Result := while i <= 1000 loop

      if i mod 8 /= 0 then

         i +:= 1;
         continue;

      end if;

      if i < 640 then

         i +:= 1;
         continue;

      end if;

      if i mod 64 = 0 then

         exit i;

      end if;

      i +:= 1;

   end loop;
   
   if Result /= 640 then

      Log_Error(["While failed!",
                 "Result = "+str(Result)]);

   end if;

   --
   --  Test until.
   --

   i := 1;

   until i = 1001 loop

      if i mod 8 /= 0 then

         i +:= 1;
         continue;

      end if;

      if i mod 64 = 0 then

         Result := i;

      end if;

      i +:= 1;

   end loop;
   
   if Result /= 960 then

      Log_Error(["Until failed!",
                 "Result = "+str(Result)]);

   end if;

   i := 1;

   until i = 1001 loop

      if i mod 8 /= 0 then

         i +:= 1;
         continue;

      end if;

      if i mod 64 = 0 then

         Result := i;
         exit;

      end if;

      i +:= 1;

   end loop;
   
   if Result /= 64 then

      Log_Error(["Until failed!",
                 "Result = "+str(Result)]);

   end if;

   until i = 1001 loop

      if i mod 8 /= 0 then

         i +:= 1;
         continue;

      end if;

      if i < 640 then

         i +:= 1;
         continue;

      end if;

      if i mod 64 = 0 then

         Result := i;
         exit;

      end if;

      i +:= 1;

   end loop;
   
   if Result /= 640 then

      Log_Error(["Until failed!",
                 "Result = "+str(Result)]);

   end if;

   i := 1;

   Result := until i = 1001 loop

      if i mod 8 /= 0 then

         i +:= 1;
         continue;

      end if;

      if i mod 64 = 0 then

         exit i;

      end if;

      i +:= 1;

   end loop;
   
   if Result /= 64 then

      Log_Error(["Until failed!",
                 "Result = "+str(Result)]);

   end if;

   i := 1;

   Result := until i = 1001 loop

      if i mod 8 /= 0 then

         i +:= 1;
         continue;

      end if;

      if i < 640 then

         i +:= 1;
         continue;

      end if;

      if i mod 64 = 0 then

         exit i;

      end if;

      i +:= 1;

   end loop;
   
   if Result /= 640 then

      Log_Error(["Until failed!",
                 "Result = "+str(Result)]);

   end if;

   End_Test;

end test_program;
